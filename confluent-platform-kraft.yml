version: '3.5'
services:

################## BROKERS ##################

  kafka1:
    image: confluentinc/cp-server:${CONFLUENT_VERSION}
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9093:9093"      
      - "19093:19093"      
      - "29093:29093"
      - "9010:9010"
    command:
      - bash
      - -c
      - |
        echo "Initializing broker for running KRaft"
        /tmp/initialize-broker.sh
        echo "Starting broker"
        /etc/confluent/docker/run &
        sleep infinity
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      # kraft
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1.${DOMAIN}:19093,2@kafka2.${DOMAIN}:19094,3@kafka3.${DOMAIN}:19095'
      # cluster linking and auto balancer can't be enabled currently with KRaft
      KAFKA_CONFLUENT_CLUSTER_LINK_ENABLE: 'false'
      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'
      # listeners
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SSL,EXTERNAL:SSL,CONTROLLER:SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1.${DOMAIN}:29093,EXTERNAL://localhost:9093
      KAFKA_LISTENERS: INTERNAL://kafka1.${DOMAIN}:29093,EXTERNAL://kafka1.${DOMAIN}:9093,CONTROLLER://kafka1.${DOMAIN}:19093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # encryption
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_SSL_KEYSTORE_LOCATION: /var/ssl/private/kafka1.${DOMAIN}.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      KAFKA_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/kafka1.${DOMAIN}.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      KAFKA_SSL_CLIENT_AUTH: 'required'
      # authorization
      #KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_SUPER_USERS: "User:kafka1;User:kafka2;User:kafka3;User:admin"
      KAFKA_SSL_PRINCIPAL_MAPPING_RULES: RULE:^CN=([a-zA-Z0-9]*).*$$/$$1/L,DEFAULT
      #KAFKA_SSL_CIPHER_SUITES: ${TLS_CIPHER_SUITES}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # metrics reporter
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:29093,kafka2:29094,kafka3:29095
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: SSL
      CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_LOCATION: /var/ssl/private/kafka1.${DOMAIN}.keystore.jks
      CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/kafka1.${DOMAIN}.truststore.jks
      CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      # logging
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_LOG4J_LOGGERS: kafka.authorizer.logger=INFO
      #KAFKA_OPTS: '-Djavax.net.debug=ssl'
      #KAFKA_JMX_PORT: 9010
      #KAFKA_JMX_HOSTNAME: localhost
      KAFKA_HEAP_OPTS: "-Xms${BROKER_HEAP} -Xmx${BROKER_HEAP}"
    volumes:
      - ./volumes/kafka-1/data:/var/lib/kafka/data
      - ./volumes/kafka-1/logs:/var/log/kafka
      - ./volumes/jmx_exporter:/jmx_exporter
      - ./certs:/var/ssl/private:ro
      - ./kraft/initialize-broker.sh:/tmp/initialize-broker.sh
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-cluster cluster-id --bootstrap-server kafka1.${DOMAIN}:29093 --config /etc/kafka/kafka.properties | grep -e 'Cluster ID: .*'"]
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 10

  kafka2:
    image: confluentinc/cp-server:${CONFLUENT_VERSION}
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9094:9094"
      - "19094:19094"
      - "29094:29094"
      - "9011:9010"
    command:
      - bash
      - -c
      - |
        echo "Initializing broker for running KRaft"
        /tmp/initialize-broker.sh
        echo "Starting broker"
        /etc/confluent/docker/run &
        sleep infinity
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      # kraft
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 2
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1.${DOMAIN}:19093,2@kafka2.${DOMAIN}:19094,3@kafka3.${DOMAIN}:19095'
      # cluster linking and auto balancer can't be enabled currently with KRaft
      KAFKA_CONFLUENT_CLUSTER_LINK_ENABLE: 'false'
      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'
      # listeners
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SSL,EXTERNAL:SSL,CONTROLLER:SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2.${DOMAIN}:29094,EXTERNAL://localhost:9094
      KAFKA_LISTENERS: INTERNAL://kafka2.${DOMAIN}:29094,EXTERNAL://kafka2.${DOMAIN}:9094,CONTROLLER://kafka2.${DOMAIN}:19094
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # encryption
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_SSL_KEYSTORE_LOCATION: /var/ssl/private/kafka2.${DOMAIN}.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      KAFKA_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/kafka2.${DOMAIN}.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      KAFKA_SSL_CLIENT_AUTH: 'required'
      # authorization
      #KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_SUPER_USERS: "User:kafka1;User:kafka2;User:kafka3;User:admin"
      KAFKA_SSL_PRINCIPAL_MAPPING_RULES: RULE:^CN=([a-zA-Z0-9]*).*$$/$$1/L,DEFAULT
      #KAFKA_SSL_CIPHER_SUITES: ${TLS_CIPHER_SUITES}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # metrics reporter
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:29093,kafka2:29094,kafka3:29095
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: SSL
      CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_LOCATION: /var/ssl/private/kafka1.${DOMAIN}.keystore.jks
      CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/kafka1.${DOMAIN}.truststore.jks
      CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      # logging
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_LOG4J_LOGGERS: kafka.authorizer.logger=INFO
      #KAFKA_OPTS: '-Djavax.net.debug=ssl'
      #KAFKA_JMX_PORT: 9010
      #KAFKA_JMX_HOSTNAME: localhost
      KAFKA_HEAP_OPTS: "-Xms${BROKER_HEAP} -Xmx${BROKER_HEAP}"
    volumes:
      - ./volumes/kafka-2/data:/var/lib/kafka/data
      - ./volumes/kafka-2/logs:/var/log/kafka
      - ./volumes/jmx_exporter:/jmx_exporter
      - ./certs:/var/ssl/private:ro
      - ./kraft/initialize-broker.sh:/tmp/initialize-broker.sh
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-cluster cluster-id --bootstrap-server kafka2.${DOMAIN}:29094 --config /etc/kafka/kafka.properties | grep -e 'Cluster ID: .*'"]
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 10

  kafka3:
    image: confluentinc/cp-server:${CONFLUENT_VERSION}
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9095:9095"
      - "19095:19095"
      - "29095:29095"
      - "9012:9010"
    command:
      - bash
      - -c
      - |
        echo "Initializing broker for running KRaft"
        /tmp/initialize-broker.sh
        echo "Starting broker"
        /etc/confluent/docker/run &
        sleep infinity
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      # kraft
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 3
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1.${DOMAIN}:19093,2@kafka2.${DOMAIN}:19094,3@kafka3.${DOMAIN}:19095'
      # cluster linking and auto balancer can't be enabled currently with KRaft
      KAFKA_CONFLUENT_CLUSTER_LINK_ENABLE: 'false'
      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'
      # ACL authorizer can't be enabled with KRaft
      #KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      # listeners
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SSL,EXTERNAL:SSL,CONTROLLER:SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3.${DOMAIN}:29095,EXTERNAL://localhost:9095
      KAFKA_LISTENERS: INTERNAL://kafka3.${DOMAIN}:29095,EXTERNAL://kafka3.${DOMAIN}:9095,CONTROLLER://kafka3.${DOMAIN}:19095
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # encryption
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_SSL_KEYSTORE_LOCATION: /var/ssl/private/kafka3.${DOMAIN}.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      KAFKA_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/kafka3.${DOMAIN}.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      KAFKA_SSL_CLIENT_AUTH: 'required'
      # authorization
      #KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_SUPER_USERS: "User:kafka1;User:kafka2;User:kafka3;User:admin"
      KAFKA_SSL_PRINCIPAL_MAPPING_RULES: RULE:^CN=([a-zA-Z0-9]*).*$$/$$1/L,DEFAULT
      #KAFKA_SUPER_USERS: "User:CN=kafka1.${DOMAIN},OU=IT,O=IDS,L=MINNEAPOLIS,ST=MN,C=US;User:CN=kafka2.${DOMAIN},OU=IT,O=IDS,L=MINNEAPOLIS,ST=MN,C=US;User:CN=kafka3.${DOMAIN},OU=IT,O=IDS,L=MINNEAPOLIS,ST=MN,C=US"
      #KAFKA_SSL_CIPHER_SUITES: ${TLS_CIPHER_SUITES}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # metrics reporter
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 3
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:29093,kafka2:29094,kafka3:29095
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: SSL
      CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_LOCATION: /var/ssl/private/kafka1.${DOMAIN}.keystore.jks
      CONFLUENT_METRICS_REPORTER_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/kafka1.${DOMAIN}.truststore.jks
      CONFLUENT_METRICS_REPORTER_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      # logging
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_LOG4J_LOGGERS: kafka.authorizer.logger=INFO
      #KAFKA_OPTS: '-Djavax.net.debug=ssl'
      #KAFKA_JMX_PORT: 9010
      #KAFKA_JMX_HOSTNAME: localhost
      KAFKA_HEAP_OPTS: "-Xms${BROKER_HEAP} -Xmx${BROKER_HEAP}"
    volumes:
      - ./volumes/kafka-3/data:/var/lib/kafka/data
      - ./volumes/kafka-3/logs:/var/log/kafka
      - ./volumes/jmx_exporter:/jmx_exporter
      - ./certs:/var/ssl/private:ro
      - ./kraft/initialize-broker.sh:/tmp/initialize-broker.sh
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-cluster cluster-id --bootstrap-server kafka3.${DOMAIN}:29095 --config /etc/kafka/kafka.properties | grep -e 'Cluster ID: .*'"]
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 30

################## CLIENT ##################

  client:
    image: kafka-client:0.0.1
    build: ./client
    hostname: client
    container_name: client
    links:
      - kafka1
      - kafka2
      - kafka3
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    command:
      - bash
      - -c
      - |
        touch /tmp/initialized
        tail -f /dev/null
    volumes:
      - ./client/scripts:/scripts:ro
      - ./certs:/var/ssl/private:ro
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "bash", "-c", "find /tmp/initialized"]
      start_period: 60s
      interval: 15s
      timeout: 15s
      retries: 15

################## SCHEMA REGISTRY ##################

  schema1:
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION}
    hostname: schema1
    container_name: schema1
    links:
      - client
    depends_on:
      client:
        condition: service_healthy
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: 'schema1'
      SCHEMA_REGISTRY_LISTENERS: 'https://0.0.0.0:8081'
      # kafka store
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'SSL://lb:29092'
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: 'SSL'
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_LOCATION: '/var/ssl/private/schema1.${DOMAIN}.keystore.jks'
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      SCHEMA_REGISTRY_KAFKASTORE_SSL_KEY_PASSWORD: ${KEYSTORE_PASSWORD}
      SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_LOCATION: '/var/ssl/private/schema1.${DOMAIN}.truststore.jks'
      SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: '_schemas'
      SCHEMA_REGISTRY_KAFKASTORE_ZK_SESSION_TIMEOUT_MS: 60000
      SCHEMA_REGISTRY_KAFKASTORE_TIMEOUT_MS: 10000
      SCHEMA_REGISTRY_KAFKASTORE_INIT_TIMEOUT_MS: 120000
      # encryption
      SCHEMA_REGISTRY_SSL_KEYSTORE_LOCATION: '/var/ssl/private/schema1.${DOMAIN}.keystore.jks'
      SCHEMA_REGISTRY_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      SCHEMA_REGISTRY_SSL_KEY_PASSWORD: ${KEYSTORE_PASSWORD}
      SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION: '/var/ssl/private/schema1.${DOMAIN}.truststore.jks'
      SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      # communication between schema registry servers
      SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: 'https'
      SCHEMA_REGISTRY_CONSUMER_GROUP_ID: 'schema-registry'
      KAFKA_HEAP_OPTS: "-Xms${SCHEMA_HEAP} -Xmx${SCHEMA_HEAP}"
    volumes:
      - ./certs:/var/ssl/private:ro
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "bash", "-c", "curl -k https://schema1:8081/subjects"]
      interval: 10s
      timeout: 10s
      retries: 10

################## KAFKA CONNECT ##################

  connect1:
    image: confluentinc/cp-server-connect:${CONFLUENT_VERSION}
    hostname: connect1
    container_name: connect1
    links:
      - schema1
    depends_on:
      schema1:
        condition: service_healthy
    command:
      - bash
      - -c
      - |
        echo "Installing Connectors"
        confluent-hub install --no-prompt confluentinc/kafka-connect-datagen:0.5.2
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.2.6
        curl -k https://jdbc.postgresql.org/download/postgresql-42.3.1.jar --output /usr/share/java/postgresql-42.3.1.jar
        #
        echo "Starting Kafka Connect server"
        /etc/confluent/docker/run &
        sleep infinity
    ports:
      - 8083:8083
      #- 9012:9010
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'SSL://lb:29092'
      CONNECT_SECURITY_PROTOCOL: 'SSL'
      CONNECT_SSL_KEYSTORE_LOCATION: '/var/ssl/private/connect1.${DOMAIN}.keystore.jks'
      CONNECT_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONNECT_SSL_KEY_PASSWORD: ${KEYSTORE_PASSWORD}
      CONNECT_SSL_TRUSTSTORE_LOCATION: '/var/ssl/private/connect1.${DOMAIN}.truststore.jks'
      CONNECT_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONNECT_REST_ADVERTISED_HOST_NAME: connect1
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: docker-connect-cluster
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: https://schema1:8081
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_SSL_KEYSTORE_LOCATION: '/var/ssl/private/connect1.${DOMAIN}.keystore.jks'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_SSL_KEY_PASSWORD: ${KEYSTORE_PASSWORD}
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION: '/var/ssl/private/connect1.${DOMAIN}.truststore.jks'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONNECT_KEY_SUBJECT_NAME_STRATEGY: io.confluent.kafka.serializers.subject.RecordNameStrategy
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: https://schema1:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_SSL_KEYSTORE_LOCATION: '/var/ssl/private/connect1.${DOMAIN}.keystore.jks'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_SSL_KEY_PASSWORD: ${KEYSTORE_PASSWORD}
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION: '/var/ssl/private/connect1.${DOMAIN}.truststore.jks'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONNECT_VALUE_SUBJECT_NAME_STRATEGY: io.confluent.kafka.serializers.subject.RecordNameStrategy
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2182,zoo3:2183
      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: All
      CONNECT_LISTENERS: https://0.0.0.0:8083
      CONNECT_REST_ADVERTISED_LISTENER: https
      # Set in seconds, this was changed to allow for detection of new topics and partitions quicker by the
      # JDBC sink connector (default is five minutes). Comment out this setting for overall better consumer
      # performance.
      CONNECT_METADATA_MAX_AGE_MS: 60
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR,org.apache.kafka=ERROR,org.apache.hadoop=ERROR,org.apache.parquet=ERROR,io.confluent=ERROR,org.apache.kafka.connect.runtime=ERROR
      #KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.rmi.port=9010 -Djava.rmi.server.hostname=10.0.0.193"
      KAFKA_JVM_PERFORMANCE_OPTS: >-
              -server -XX:+UseG1GC -XX:GCTimeRatio=1
              -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20
              -XX:MaxGCPauseMillis=10000 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent
              -XX:MaxInlineLevel=15 -Djava.awt.headless=true
      KAFKA_HEAP_OPTS: "-Xms${CONNECT_HEAP} -Xmx${CONNECT_HEAP}"
    volumes:
      - ./schemas:/schemas:ro
      - ./certs:/var/ssl/private:ro
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "bash", "-c", "curl -k https://connect1:8083/connectors"]
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 10

################## KSQL ##################

  ksql1:
    image: confluentinc/cp-ksqldb-server:${CONFLUENT_VERSION}
    hostname: ksql1
    container_name: ksql1
    links:
      - connect1
    depends_on:
      connect1:
        condition: service_healthy
    ports:
      - 8088:8088
    environment:
      CUB_CLASSPATH: '/usr/share/java/confluent-security/ksql/*:/usr/share/java/ksqldb-server/*:/usr/share/java/cp-base-new/*'
      # general
      KSQL_KSQL_SERVICE_ID: "ksql-cluster"
      KSQL_KSQL_STREAMS_REPLICATION_FACTOR: 3
      KSQL_KSQL_INTERNAL_TOPIC_REPLICAS: 3
      KSQL_KSQL_STREAMS_NUM_STREAM_THREADS: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 3
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
      KSQL_PRODUCER_ENABLE_IDEMPOTENCE: 'true'
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      # rest service
      KSQL_LISTENERS: "https://0.0.0.0:8088"
      KSQL_HOST_NAME: ksql1     
      # broker connection
      KSQL_BOOTSTRAP_SERVERS: lb.${DOMAIN}:29092
      # encryption
      KSQL_SSL_KEYSTORE_LOCATION: '/var/ssl/private/ksql1.${DOMAIN}.keystore.jks'
      KSQL_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      KSQL_SSL_TRUSTSTORE_LOCATION: '/var/ssl/private/ksql1.${DOMAIN}.truststore.jks'
      KSQL_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      KSQL_SSL_ENABLED_PROTOCOLS: "TLSv1.3,TLSv1.2" # Before v6.1.0: disabling TLSv1.x is required 
      KSQL_SSL_CIPHER_SUITES: ${SSL_CIPHER_SUITES}
      # authentication
      KSQL_SECURITY_PROTOCOL: SSL
      # schema registry
      KSQL_KSQL_SCHEMA_REGISTRY_URL: https://schema1:8081
      KSQL_KSQL_SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION: '/var/ssl/private/ksql1.${DOMAIN}.truststore.jks'
      KSQL_KSQL_SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      KSQL_KSQL_SCHEMA_REGISTRY_BASIC_AUTH_CREDENTIALS_SOURCE: USER_INFO
      KSQL_KSQL_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: ksql:ksql-secret
      # Confluent Monitoring Interceptors for Control Center streams monitoring
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"    
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SSL_TRUSTSTORE_LOCATION: '/var/ssl/private/ksql1.${DOMAIN}.truststore.jks'
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SSL_KEYSTORE_LOCATION: '/var/ssl/private/ksql1.${DOMAIN}.keystore.jks'
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: SSL
      # logging
      KSQL_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_HEAP_OPTS: "-Xms${KSQL_HEAP} -Xmx${KSQL_HEAP}"
    volumes:
      - ./kerberos/keytabs/ksql.keytab:/etc/security/keytabs/ksql.keytab:ro
      - ./kerberos/krb5.conf:/etc/krb5.conf:ro
      - ./certs:/var/ssl/private:ro
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "bash", "-c", "curl -k -u ksql:ksql-secret https://ksql1.${DOMAIN}:8088/healthcheck | grep '\"isHealthy\":true'"]
      interval: 10s
      timeout: 10s
      retries: 10

  ksql-cli:
    image: confluentinc/cp-ksqldb-cli:${CONFLUENT_VERSION}
    hostname: ksql-cli
    container_name: ksql-cli
    depends_on:
      ksql1:
        condition: service_healthy
    volumes:
      - ./certs:/var/ssl/private:ro
      - ./ksql:/config:ro
    entrypoint: /bin/sh
    tty: true
    networks:
      - kafka-network
      
################## CONTROL CENTER ##################

  c3:
    image: confluentinc/cp-enterprise-control-center:latest
    container_name: c3
    hostname: c3
    links:
      - client
    depends_on:
      client:
        condition: service_healthy
    ports:
      - 9021:9021
    environment:
      # general
      CUB_CLASSPATH: '/usr/share/java/confluent-control-center/*:/usr/share/java/rest-utils/*:/usr/share/java/confluent-common/*:/usr/share/java/confluent-security/kafka-rest/*:/usr/share/java/kafka-rest/:/usr/share/java/cp-base-new/*'
      CONTROL_CENTER_DATA_DIR: /var/lib/c3/data
      CONTROL_CENTER_BOOTSTRAP_SERVERS: lb.${DOMAIN}:29092
      # broker cluster 1
      # CONTROL_CENTER_KAFKA_CLUSTER1_BOOTSTRAP_SERVERS: lb.${DOMAIN}:29092
      CONTROL_CENTER_KAFKA_CLUSTER1_BOOTSTRAP_SERVERS: lb.${DOMAIN}:29092
      CONTROL_CENTER_REST_AUTHENTICATION_METHOD: BASIC
      CONTROL_CENTER_REST_AUTHENTICATION_REALM: c3
      CONTROL_CENTER_REST_AUTHENTICATION_ROLES: Administrators,Restricted
      CONTROL_CENTER_AUTH_RESTRICTED_ROLES: Restricted
      CONTROL_CENTER_AUTH_SESSION_EXPIRATION_MS: 60000
      # broker cluster 1 - encryption
      CONTROL_CENTER_KAFKA_CLUSTER1_SSL_KEYSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.keystore.jks
      CONTROL_CENTER_KAFKA_CLUSTER1_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONTROL_CENTER_KAFKA_CLUSTER1_SSL_KEY_PASSWORD: ${KEYSTORE_PASSWORD}
      CONTROL_CENTER_KAFKA_CLUSTER1_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.truststore.jks
      CONTROL_CENTER_KAFKA_CLUSTER1_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      # broker cluster 1 - authentication
      CONTROL_CENTER_KAFKA_CLUSTER1_SECURITY_PROTOCOL: SSL
      # streams encryption
      CONTROL_CENTER_STREAMS_SSL_CIPHER_SUITES: ${SSL_CIPHER_SUITES}
      CONTROL_CENTER_STREAMS_SSL_KEYSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.keystore.jks
      CONTROL_CENTER_STREAMS_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONTROL_CENTER_STREAMS_SSL_KEY_PASSWORD: ${KEYSTORE_PASSWORD}
      CONTROL_CENTER_STREAMS_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.truststore.jks
      CONTROL_CENTER_STREAMS_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      # streams connection - authentication
      CONTROL_CENTER_STREAMS_SECURITY_PROTOCOL: SSL
      # streams producer encryption
      CONTROL_CENTER_STREAMS_PRODUCER_SSL_KEYSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.keystore.jks
      CONTROL_CENTER_STREAMS_PRODUCER_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONTROL_CENTER_STREAMS_PRODUCER_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.truststore.jks
      CONTROL_CENTER_STREAMS_PRODUCER_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      # streams producer authentication
      CONTROL_CENTER_STREAMS_PRODUCER_SECURITY_PROTOCOL: SSL
      # Amount of heap to use for internal caches. Increase for better throughput
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 100000000
      CONTROL_CENTER_STREAMS_CONSUMER_REQUEST_TIMEOUT_MS: "960032"
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      # metrics reporter connection
      CONTROL_CENTER_METRICS_REPORTER_SECURITY_PROTOCOL: SSL
      # metrics reporter encryption
      CONTROL_CENTER_METRICS_REPORTER_SSL_KEYSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.keystore.jks
      CONTROL_CENTER_METRICS_REPORTER_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONTROL_CENTER_METRICS_REPORTER_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.truststore.jks
      CONTROL_CENTER_METRICS_REPORTER_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      # topic partitions
      CONTROL_CENTER_REPLICATION_FACTOR: 3
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 3
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 3
      CONTROL_CENTER_METRICS_TOPIC_PARTITIONS: 1
      # Control Center UI SSL
      CONTROL_CENTER_REST_LISTENERS: https://0.0.0.0:9021
      CONTROL_CENTER_REST_SSL_KEYSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.keystore.jks
      CONTROL_CENTER_REST_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONTROL_CENTER_REST_SSL_KEY_PASSWORD: ${KEYSTORE_PASSWORD}
      CONTROL_CENTER_REST_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.truststore.jks
      CONTROL_CENTER_REST_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONTROL_CENTER_REST_SSL_CIPHER_SUITES: ${SSL_CIPHER_SUITES}
      # Connect
      CONTROL_CENTER_CONNECT_CONNECT1_CLUSTER: https://connect1:8083
      CONTROL_CENTER_CONNECT_CONNECT1_SSL_KEYSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.keystore.jks
      CONTROL_CENTER_CONNECT_CONNECT1_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONTROL_CENTER_CONNECT_CONNECT1_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.truststore.jks
      CONTROL_CENTER_CONNECT_CONNECT1_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      # Schema Registry
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: https://schema1:8081
      CONTROL_CENTER_SCHEMA_REGISTRY_SR1_SSL_KEYSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.keystore.jks
      CONTROL_CENTER_SCHEMA_REGISTRY_SCHEMA_REGISTRY_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONTROL_CENTER_SCHEMA_REGISTRY_SCHEMA_REGISTRY_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.truststore.jks
      CONTROL_CENTER_SCHEMA_REGISTRY_SCHEMA_REGISTRY_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      # KSQL
      CONTROL_CENTER_KSQL_KSQL_ADVERTISED_URL: https://ksql1:8088
      CONTROL_CENTER_KSQL_KSQL_URL: https://ksql1:8088
      CONTROL_CENTER_KSQL_KSQL_SSL_KEYSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.keystore.jks
      CONTROL_CENTER_KSQL_KSQL_SSL_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONTROL_CENTER_KSQL_KSQL_SSL_TRUSTSTORE_LOCATION: /var/ssl/private/c3.${DOMAIN}.truststore.jks
      CONTROL_CENTER_KSQL_KSQL_SSL_TRUSTSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
      CONTROL_CENTER_KSQL_KSQL_BASIC_AUTH_USER_INFO: c3:c3-secret
      # logging
      CONTROL_CENTER_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONTROL_CENTER_OPTS: "-Djava.security.auth.login.config=/etc/kafka/jaas.conf"
      KAFKA_HEAP_OPTS: "-Xms${C3_HEAP} -Xmx${C3_HEAP}"
    volumes:
      - ./volumes/c3/data:/var/lib/c3/data
      - ./certs:/var/ssl/private:ro
      - ./secrets/c3-server-jaas.conf:/etc/kafka/jaas.conf:ro
      - ./secrets/c3-password.properties:/etc/kafka/password.properties:ro
    networks:
      - kafka-network

################## OTHER ##################

  lb:
    image: nginx:${NGINX_VERSION}
    hostname: lb
    container_name: lb
    links:
      - kafka1
      - kafka2
      - kafka3
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - ./nginx/nginx-mtls-acl.conf:/etc/nginx/nginx.conf:ro
    networks:
      - kafka-network

  postgres:
    image: postgres
    hostname: postgres
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespass
      POSTGRES_DB: kafka
      PGDATA: /data
    volumes:
      - ./volumes/postgres:/data
    networks:
      - kafka-network

networks:
  kafka-network:
    name: ${DOMAIN}